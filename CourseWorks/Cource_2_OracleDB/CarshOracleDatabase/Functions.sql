CREATE OR REPLACE FUNCTION ENCRYPT_PASSWORD(
    PASSWORD IN VARCHAR2
) RETURN VARCHAR2
IS
    CIPHER_TEXT RAW(32767);
    KEY RAW(16);
BEGIN
    KEY := '1616161616161616';
    CIPHER_TEXT := DBMS_CRYPTO.ENCRYPT(
        SRC => UTL_I18N.STRING_TO_RAW(PASSWORD, 'AL32UTF8'),
        TYP => DBMS_CRYPTO.ENCRYPT_DES + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5,
        KEY =>  KEY
    );
    RETURN RAWTOHEX(CIPHER_TEXT);
END;






CREATE OR REPLACE FUNCTION DECRYPT_PASSWORD(
    CIPHER_TEXT IN VARCHAR2
) RETURN VARCHAR2
IS
    PASSWORD VARCHAR2(32767);
    KEY RAW(16);
BEGIN
    KEY := '1616161616161616';
     PASSWORD := UTL_I18N.RAW_TO_CHAR(
        DBMS_CRYPTO.DECRYPT(
            SRC => HEXTORAW(CIPHER_TEXT),
            TYP => DBMS_CRYPTO.ENCRYPT_DES + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5,
            KEY => KEY
        ),
        'AL32UTF8'
    );
    RETURN PASSWORD;
END;





CREATE DIRECTORY MY_IMAGE_DIR AS 'D:\OracleBD\oradata\CARSH\IMG_DIR';
DROP DIRECTORY MY_IMAGE_DIR;

CREATE OR REPLACE FUNCTION REGISTER(
    IN_USER_ID IN NUMBER,
    IN_USER_NAME IN VARCHAR2,
    IN_USER_EMAIL IN VARCHAR2, 
    IN_USER_IMG IN VARCHAR2,
    IN_USER_PASSWORD IN VARCHAR2,
    IN_USER_DATE_OF_BIRTH IN DATE,
    IN_USER_ROLE_ID IN NUMBER,
    IN_USER_PHONE IN VARCHAR2,
    IN_USER_PASSPORT IN VARCHAR2,
    IN_USER_CREDIT_CARD IN VARCHAR2
)
    RETURN NUMBER
IS
    l_blob BLOB;
    l_bfile BFILE := BFILENAME('MY_IMAGE_DIR', IN_USER_IMG);
    ENCRYPTED_PASSWORD VARCHAR2(128) := ENCRYPT_PASSWORD(IN_USER_PASSWORD);
    USER_ID NUMBER;
    PRAGMA AUTONOMOUS_TRANSACTION; 
BEGIN
    DBMS_LOB.OPEN(l_bfile, DBMS_LOB.LOB_READONLY);
    DBMS_LOB.CREATETEMPORARY(l_blob, TRUE);
    DBMS_LOB.LOADFROMFILE(l_blob, l_bfile, DBMS_LOB.GETLENGTH(l_bfile));
    DBMS_LOB.CLOSE(l_bfile);
    INSERT INTO DEV.USERS(USER_ID,USER_NAME, USER_EMAIL, USER_IMG,  USER_PASSWORD, USER_DATE_OF_BIRTH, USER_ROLE, PHONE, USER_PASSPORT, CREDIT_CARD )
    VALUES (IN_USER_ID, IN_USER_NAME, IN_USER_EMAIL, l_blob, ENCRYPTED_PASSWORD, IN_USER_DATE_OF_BIRTH, IN_USER_ROLE_ID, IN_USER_PHONE, IN_USER_PASSPORT, IN_USER_CREDIT_CARD)
    RETURNING DEV.USERS.USER_ID INTO USER_ID;
    DBMS_OUTPUT.PUT_LINE('User registred successfully.');
    COMMIT; 
    RETURN USER_ID; 
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
         DBMS_OUTPUT.PUT_LINE('Error updating user: ' || SQLERRM);
        RAISE;
   
END;





CREATE OR REPLACE FUNCTION LOGIN(IN_USER_EMAIL VARCHAR2, IN_USER_PASSWORD VARCHAR2)
RETURN NUMBER
IS
    STORED_PASSWORD VARCHAR2(32767);
BEGIN 
    SELECT USER_PASSWORD INTO STORED_PASSWORD FROM USERS WHERE USER_EMAIL = IN_USER_EMAIL;
    IF STORED_PASSWORD IS NULL THEN
        RETURN 0; 
    ELSIF STORED_PASSWORD = ENCRYPT_PASSWORD(IN_USER_PASSWORD) THEN
        RETURN 1;
        DBMS_OUTPUT.PUT_LINE('User login successfully.');
    ELSE
        RETURN 0;
        DBMS_OUTPUT.PUT_LINE('Error  user: ' || SQLERRM);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
           DBMS_OUTPUT.PUT_LINE('Error user: ' || SQLERRM);
END;





CREATE OR REPLACE FUNCTION TOTAL_PRICE(
    in_pricing_id NUMBER,
    in_car_id NUMBER,
    in_price_per_min NUMBER,
    in_count_min NUMBER
)
    RETURN NUMBER
IS 
    PRICE NUMBER;
    PRICING_ID NUMBER;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN 
    PRICE := in_price_per_min * in_count_min;
    INSERT INTO PRICING(pricing_id, car_id, price_per_min, count_min,  total_price)
    VALUES (in_pricing_id, in_car_id, in_price_per_min, in_count_min, PRICE)
    RETURNING PRICING.pricing_id INTO pricing_id;
        DBMS_OUTPUT.PUT_LINE('Insered table and calculate total_price successfully.');
    COMMIT; 
    RETURN pricing_id; 
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
        DBMS_OUTPUT.PUT_LINE('Error  insered: ' || SQLERRM);
        RAISE;
   
END;





CREATE OR REPLACE FUNCTION ADD_CAR(
    IN_CAR_ID IN NUMBER,
    IN_CAR_BRAND IN VARCHAR2,
    IN_CAR_MODEL IN VARCHAR2, 
    IN_BODY_ID IN NUMBER,
    IN_CAR_INFO IN VARCHAR2,
    IN_TYPE_FUEL IN VARCHAR,
    IN_LICENSE_PLATE IN VARCHAR2,
    IN_COLOR IN VARCHAR2,
    IN_CAR_IMG IN VARCHAR2,
    IN_CAR_CONDITION IN NUMBER
)
    RETURN NUMBER
IS
    car_img BLOB;
    car_bfile BFILE := BFILENAME('MY_IMAGE_DIR', IN_CAR_IMG);
    CAR_ID NUMBER;
    PRAGMA AUTONOMOUS_TRANSACTION; 
BEGIN
    DBMS_LOB.OPEN(car_bfile, DBMS_LOB.LOB_READONLY);
    DBMS_LOB.CREATETEMPORARY(car_img, TRUE);
    DBMS_LOB.LOADFROMFILE(car_img,car_bfile, DBMS_LOB.GETLENGTH(car_bfile));
    DBMS_LOB.CLOSE(car_bfile);
    INSERT INTO CARS(CAR_ID,CAR_BRAND,CAR_MODEL, BODY_ID,  CAR_INFO, TYPE_FUEL, LICENSE_PLATE, COLOR, CAR_IMAGE,CAR_CONDITION )
    VALUES (IN_CAR_ID, IN_CAR_BRAND, IN_CAR_MODEL,IN_BODY_ID, TO_CLOB(IN_CAR_INFO),IN_TYPE_FUEL, IN_LICENSE_PLATE, IN_COLOR, car_img, IN_CAR_CONDITION)
    RETURNING CARS.CAR_ID INTO CAR_ID;
    DBMS_OUTPUT.PUT_LINE('Car added successfully.');
    COMMIT; 
    RETURN CAR_ID; 
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; 
        DBMS_OUTPUT.PUT_LINE('Error  car: ' || SQLERRM);
        RAISE;
   
END;
    





