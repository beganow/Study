CREATE OR REPLACE TRIGGER CHECK_DATE_OF_BIRTH
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
BEGIN
    IF MONTHS_BETWEEN(SYSDATE, :NEW.USER_DATE_OF_BIRTH) < 216 THEN
        RAISE_APPLICATION_ERROR(-20001, 'USER MUST BE AT LEAST 18 YEARS OLD');
    END IF;
END;

ALTER TRIGGER CHECK_DATE_OF_BIRTH ENABLE;
ALTER TRIGGER CHECK_DATE_OF_BIRTH DISABLE;


CREATE OR REPLACE TRIGGER CHECK_PASSWORD_LENGTH
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
DECLARE
    decrypted_password VARCHAR2(128);
BEGIN
    decrypted_password := DECRYPT_PASSWORD(:NEW.USER_PASSWORD);
    
    IF LENGTH(decrypted_password) < 8 THEN
        RAISE_APPLICATION_ERROR(-20001, 'PASSWORD MUST CONTAIN AT LEAST 8 CHARACTERS');
    END IF;
END;

ALTER TRIGGER CHECK_PASSWORD_LENGTH ENABLE;
ALTER TRIGGER CHECK_PASSWORD_LENGTH DISABLE;


CREATE OR REPLACE TRIGGER CHECK_EMAIL_DOMAIN
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
BEGIN
    IF NOT REGEXP_LIKE(:NEW.USER_EMAIL, '(^| )[^@]+@(gmail\.com|yandex\.ru|mail\.ru)( |$)') THEN
        RAISE_APPLICATION_ERROR(-20001, 'INVALID EMAIL DOMAIN');
    END IF;
END;

ALTER TRIGGER CHECK_EMAIL_DOMAIN ENABLE;
ALTER TRIGGER CHECK_EMAIL_DOMAIN DISABLE;


/*CREATE OR REPLACE TRIGGER trg_update_amount
AFTER UPDATE OF total_price ON PRICING
FOR EACH ROW
BEGIN
  UPDATE PAYMENTS
  SET amount = :NEW.total_price
  WHERE payment_id = :NEW.pricing_id;
END;
ALTER TRIGGER trg_update_amount DISABLE;

CREATE OR REPLACE TRIGGER trg_update_payment_date
AFTER UPDATE OF start_time ON BOOKING
FOR EACH ROW
BEGIN
  UPDATE PAYMENTS
  SET payment_date = :NEW.start_time
  WHERE user_id = :NEW.user_id;
END;
ALTER TRIGGER trg_update_payment_date DISABLE;*/
