1. Рефлексия - это процесс выявления типов (объектов типа Type) во время выполнения приложения (run-time). 
С помощью классов, содержащихся в пространстве имен. System.Reflection мы можем получать информацию о сборке, 
используемых классах, свойствах классов и прочую информацию для использования в нашем же приложении.
2. Чтобы управлять типом и получать всю информацию о нем, нам надо сперва получить данный тип.
 Это можно сделать тремя способами: с помощью оператора typeof, с помощью метода GetType() класса Object
 и применяя статический метод Type.GetType()

3. Assembly: класс, представляющий сборку и позволяющий манипулировать этой сборкой

AssemblyName: класс, хранящий информацию о сборке

MemberInfo: базовый абстрактный класс, определяющий общий функционал для классов EventInfo, FieldInfo, MethodInfo и PropertyInfo

EventInfo: класс, хранящий информацию о событии

FieldInfo: хранит информацию об определенном поле типа

MethodInfo: хранит информацию об определенном методе

PropertyInfo: хранит информацию о свойстве

ConstructorInfo: класс, представляющий конструктор

Module: класс, позволяющий получить доступ к определенному модулю внутри сборки

ParameterInfo: класс, хранящий информацию о параметре метода


4.Класс Type представляет изучаемый тип, инкапсулируя всю информацию о нем. 
С помощью его свойств и методов можно получить эту информацию. Некоторые из его свойств и методов:

Метод FindMembers() возвращает массив объектов MemberInfo данного типа

Метод GetConstructors() возвращает все конструкторы данного типа в виде набора объектов ConstructorInfo

Метод GetEvents() возвращает все события данного типа в виде массива объектов EventInfo

Метод GetFields() возвращает все поля данного типа в виде массива объектов FieldInfo

Метод GetInterfaces() получает все реализуемые данным типом интерфейсы в виде массива объектов Type

Метод GetMembers() возвращает все члены типа в виде массива объектов MemberInfo

Метод GetMethods() получает все методы типа в виде массива объектов MethodInfo

Метод GetProperties() получает все свойства в виде массива объектов PropertyInfo

Свойство Name возвращает имя типа

Свойство Assembly возвращает название сборки, где определен тип

Свойство Namespace возвращает название пространства имен, где определен тип

Свойство IsArray возвращает true, если тип является массивом

Свойство IsClass возвращает true, если тип представляет класс

Свойство IsEnum возвращает true, если тип является перечислением

Свойство IsInterface возвращает true, если тип представляет интерфейс


Раннее связывание (или «статическая привязка») означает, что компилятор (или линкер) может напрямую связать 
имя идентификатора (например, имя функции или переменной) с машинным адресом. 
Помните, что все функции имеют свой уникальный адрес.

Чтобы динамически загрузить сборку в приложение, надо использовать статические
 методы Assembly. LoadFrom() или Assembly. Load(). 
Метод LoadFrom() принимает в качестве параметра путь к сборке