Процесс – объект, который создаётся Операционной Системой для каждого приложения в момент его запуска.
В рамках процесса создаются потоки (один – первичный создаётся всегда). 
Это последовательность выполняемых команд процессора.
Домен приложения полностью изолирует используемые в его рамках ресурсы (совместно используемые данные) 
как от других доменов того же самого процесса, так, естественно, от доменов приложения других процессов.
При запуске приложения операционная система создает для него отдельный процесс, которому выделяется определённое 
адресное пространство в памяти и который изолирован от других процессов.

домены 

Свойство BaseDirectory: базовый каталог, который используется для получения сборок (как правило, каталог самого приложения)

Свойство CurrentDomain: домен текущего приложения

Свойство FriendlyName: имя домена приложения

Свойство SetupInformation: представляет объект AppDomainSetup и хранит конфигурацию домена приложения

Метод ExecuteAssembly(): запускает сборку exe в рамках текущего домена приложения

Метод GetAssemblies(): получает набор сборок .NET, загруженных в домен приложения


потоки 
CurrentPriority: возвращает текущий приоритет потока

Id: идентификатор потока

IdealProcessor: позволяет установить процессор для обработки потока

PriorityLevel: уровень приоритета потока

StartAddress: адрес в памяти функции, запустившей поток

StartTime: время запуска потока (поддерживается только на Windows и Linux)

Process proc = Process.GetProcessesByName("devenv")[0];  // Windows
ProcessThreadCollection processThreads = proc.Threads;
 
foreach(ProcessThread thread in processThreads)
{
    Console.WriteLine($"ThreadId: {thread.Id}");
}



hreadState возвращает состояние потока - одно из значений перечисления ThreadState:

Aborted: поток остановлен, но пока еще окончательно не завершен

AbortRequested: для потока вызван метод Abort, но остановка потока еще не произошла

Background: поток выполняется в фоновом режиме

Running: поток запущен и работает (не приостановлен)

Stopped: поток завершен

StopRequested: поток получил запрос на остановку

Suspended: поток приостановлен

SuspendRequested: поток получил запрос на приостановку

Unstarted: поток еще не был запущен

WaitSleepJoin: поток заблокирован в результате действия методов Sleep или Join

Highest — самый высокий 
AboveNormal — выше среднего 
Normal — стандартный 
BelowNormal — ниже среднего 
Lowest — самый низкий.


Пул потоков – это коллекция потоков для выполнения методов в фоновом режиме. 
Распределение пулов занимается CLR. 
Что бы выполнить метод асинхронно необходимо поместить его в очередь потока, пул потоков будет сам извлекать методы из очереди и выполнять их.
 При наличии большого количества методов, будет создан еще один фоновый поток.



Критическая секция в .NET работает в двух режимах: режиме spin-wait и режиме ядра. Алгоритм spin-wait удобно представить в виде следующего псевдокода:

while(!TryEnter(syncObject))


Блокировки объектов позволяют ограничить доступ к блоку кода, обычно называемому критическим разделом. 
Пока поток владеет блокировкой для объекта, никакой другой поток не может получить эту блокировку.

инструмент управления синхронизацией потоков представляет класс Mutex или мьютекс, 
который также располагается в пространстве имен System.Threading.
Метод mutexObj.WaitOne() приостанавливает выполнение потока до тех пор, пока не будет получен мьютекс mutexObj.

Семафоры позволяют ограничить количество потоков, которые имеют доступ к определенным ресурсам.
 В .NET семафоры представлены классом Semaphore.

Неблокирующие средства синхронизации позволяют осуществлять совместный доступ 
к простым ресурсам нескольких потоков без блокировки, паузы или ожидания. 


Для оптимизации выполнения программы центральный процессор иногда применяет перестановку инструкций программы 
или их кэширование. Чтобы отменить подобную оптимизацию следует разместить в исходном коде барьеры памяти. 
Процессор не способен изменить порядок команд, чтобы инструкции до барьера, выполнялись после инструкций за барьером. 
Для установки барьера памяти нужно вызвать статический метод Thread.MemoryBarrier().

 Timer.Данный класс позволяет запускать определенные действия по истечению некоторого периода времени.
Параметры:
объект делегата TimerCallback

объект, передаваемый в качестве параметра в метод Count

количество миллисекунд, через которое таймер будет запускаться. В данном случае таймер будет запускать немедленно после создания, так как в качестве значения используется 0

интервал между вызовами метода Count