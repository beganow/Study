//1  Что такое TPL? Как и для чего используется тип Task 
//TPL - Task Parallel Library - библиотека для параллельного выполнения задач.
//Task - это класс, который позволяет выполнять задачи параллельно, а также возвращать результаты.

//2  Почему эффект от распараллеливания наблюдается на большом 
//количестве элементов?
//Потому что при малом количестве элементов, время выполнения задачи меньше, чем время создания потока.

//3  В чем основные достоинства работы с задачами по сравнению с
//потокми?
//Потоки создаются дороже, чем задачи. Потоки требуют больше ресурсов, чем задачи. Потоки могут быть созданы только в рамках одного процесса, а задачи могут быть созданы в рамках нескольких процессов.

//4  Приведите три способа создания и/или запуска Task?
//Task.Run(Action);
//Task.Factory.StartNew(Action);
//new Task(Action).Start();

//5   Как и для чего используют методы Wait(), WaitAll() и WaitAny()? 
//Wait() - ожидает завершения задачи.
//WaitAll() - ожидает завершения всех задач.
//WaitAny() - ожидает завершения любой задачи.

//6. Приведите пример синхронного запуска Task?
//Task task = Task.Run(() => { Console.WriteLine("Hello"); });
//task.Wait();


//7. Как создать задачу с возвратом результата? 
//Task<int> task = Task.Run(() => { return 42; });

/*8. Как обработать исключение, если оно произошло при выполнении 
Task?*/
//Task task = Task.Run(() => { throw new Exception(); });
//try
//{
//    task.Wait();
//}
//catch (AggregateException ex)
//{
//    Console.WriteLine(ex.InnerException.Message);

//}

/*9. Что такое CancellationToken и как с его помощью отменить 
выполнение задач?*/
//CancellationToken - это токен, который используется для отмены задачи.
//CancellationTokenSource - это источник токена, который используется для создания токена.
//CancellationTokenSource cts = new CancellationTokenSource();
//Task task = Task.Run(() => { while (true) { } }, cts.Token);
//cts.Cancel();

//10.Как организовать задачу продолжения (continuation task) ?
//Task task = Task.Run(() => { Console.WriteLine("Hello"); });
//Task task2 = task.ContinueWith((prevTask) => { Console.WriteLine("World"); });

/*11.Как и для чего используется объект ожидания при создании задач 
продолжения?*/
//Task task = Task.Run(() => { Console.WriteLine("Hello"); });  
//Task task2 = task.ContinueWith((prevTask) => { Console.WriteLine("World"); }, TaskContinuationOptions.OnlyOnRanToCompletion);
//Используется для того, чтобы задача продолжения выполнялась только в случае, если предыдущая задача завершилась успешно.

//12.Поясните назначение класса System.Threading.Tasks.Parallel?
//Класс System.Threading.Tasks.Parallel предоставляет методы для параллельного выполнения операций.

//13.Приведите пример задачи с Parallel.For(int, int, Action<int>)
//Parallel.For(0, 10, i => { Console.WriteLine(i); });
//Это пример параллельного цикла. 

//14.Приведите пример задачи с Parallel.ForEach
//Parallel.ForEach(new int[] { 1, 2, 3, 4, 5 }, i => { Console.WriteLine(i); });
//Это пример параллельного цикла.


//15.Приведите пример с Parallel.Invoke()
//Parallel.Invoke(() => { Console.WriteLine("Hello"); }, () => { Console.WriteLine("World"); });
//Это пример параллельного выполнения методов.


//16.Как с использованием CancellationToken отменить параллельные
//операции?
//CancellationTokenSource cts = new CancellationTokenSource();
//ParallelOptions po = new ParallelOptions();
//po.CancellationToken = cts.Token;
//Parallel.For(0, 10, po, i => { Console.WriteLine(i); });
//cts.Cancel();

//17.Для чего используют BlockingCollection<T>, в чем ее особенность?
//BlockingCollection<T> - это коллекция, которая блокирует поток, пока не будет добавлен элемент в коллекцию.
//BlockingCollection<int> bc = new BlockingCollection<int>();
//Task.Run(() => { bc.Add(1); });
//Console.WriteLine(bc.Take());


//18.Как используя async и await организовать асинхронное выполенение
//метода
//public async Task<string> GetPageAsync(string url)
//{
//    HttpClient client = new HttpClient();
//    return await client.GetStringAsync(url);
//}