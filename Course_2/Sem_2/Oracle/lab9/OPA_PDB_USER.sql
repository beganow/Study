CREATE GLOBAL TEMPORARY TABLE temp_orders (
  order_id NUMBER(10),
  customer_id NUMBER(10),
  order_date DATE
) ON COMMIT DELETE ROWS;

INSERT INTO temp_orders (order_id, customer_id, order_date)
VALUES (1, 100, TO_DATE('2023-05-05', 'YYYY-MM-DD'));

CREATE GLOBAL TEMPORARY TABLE temp_orders1 (
  order_id NUMBER(10),
  customer_id NUMBER(10),
  order_date DATE
) ON COMMIT PRESERVE ROWS;

INSERT INTO temp_orders1 (order_id, customer_id, order_date)
VALUES (1, 100, TO_DATE('2023-05-05', 'YYYY-MM-DD'));

SELECT * FROM temp_orders1;

SELECT TEMPORARY, DURATION 
FROM USER_TABLES 
WHERE TABLE_NAME = 'TEMP_ORDERS';

SELECT TEMPORARY, DURATION 
FROM USER_TABLES 
WHERE TABLE_NAME = 'TEMP_ORDERS1';


/* task 3*/

CREATE SEQUENCE S1
  START WITH 1000
  INCREMENT BY 10
  NOMINVALUE
  NOMAXVALUE
  NOCYCLE
  NOCACHE
  NOORDER;
  
  SELECT S1.NEXTVAL FROM DUAL CONNECT BY LEVEL <= 5;
  SELECT S1.CURRVAL FROM DUAL;
 
 /* task 4*/
CREATE SEQUENCE S2
  START WITH 10
  INCREMENT BY 10
  MAXVALUE 100
  NOCYCLE;



SELECT S2.NEXTVAL FROM DUAL CONNECT BY LEVEL <= 10;
SELECT S2.NEXTVAL FROM DUAL;

DROP SEQUENCE S2;

 
 /* task 5*/
CREATE SEQUENCE S3
  START WITH 10
  INCREMENT BY -10
  MINVALUE -100
  MAXVALUE 100
  NOCYCLE
  ORDER;
  
  SELECT S3.NEXTVAL FROM DUAL
CONNECT BY LEVEL <= 12;
SELECT S3.NEXTVAL FROM DUAL;

DROP SEQUENCE S3;

 /* task 6*/
CREATE SEQUENCE S4
  START WITH 10
  INCREMENT BY 1
  MINVALUE 10
  MAXVALUE 20
  CYCLE
  CACHE 5
  NOORDER;
  
  SELECT S4.NEXTVAL FROM DUAL CONNECT BY LEVEL <= 12;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    SELECT S4.NEXTVAL FROM DUAL;
    
    DROP SEQUENCE S4;
    
     /* task 7*/
    SELECT sequence_name
    FROM all_sequences
    WHERE sequence_owner = 'OPA';
    
    /* task 8*/
  CREATE TABLE T1 (
  N1 NUMBER(20),
  N2 NUMBER(20),
  N3 NUMBER(20),
  N4 NUMBER(20)
)
STORAGE(
  BUFFER_POOL KEEP
);
ALTER TABLE T1 CACHE;

INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);
INSERT INTO T1 (N1, N2, N3, N4) VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

select * from T1;

DROP TABLE T1;

/* task 9*/

CREATE CLUSTER ABC 
(
  X NUMBER(10),
  V VARCHAR2(12)
)
HASHKEYS 200;

/* task 10*/
CREATE TABLE A
(
  XA NUMBER(10),
  VA VARCHAR2(12),
  COLUMN3 VARCHAR2(50)
)
CLUSTER ABC(XA, VA);

/* task 11*/
CREATE TABLE B
(
  XB NUMBER(10),
  VB VARCHAR2(12),
  COLUMN3 VARCHAR2(50)
)
CLUSTER ABC(XB, VB);


/* task 12*/

CREATE TABLE C
(
  XC NUMBER(10),
  VC VARCHAR2(12),
  COLUMN3 VARCHAR2(50)
)
CLUSTER ABC(XC, VC);

/* task 13*/
SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'A';
SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'B';
SELECT * FROM ALL_TABLES WHERE TABLE_NAME = 'C';
SELECT * FROM ALL_CLUSTERS WHERE CLUSTER_NAME = 'ABC';

CREATE SYNONYM my_tableC FOR Ñ;


CREATE PUBLIC SYNONYM my_tableB FOR B;
SELECT * FROM ALL_SYNONYMS WHERE SYNONYM_NAME='MY_TABLEB';
SELECT * FROM ALL_SYNONYMS WHERE SYNONYM_NAME='MY_TABLEC';


CREATE TABLE A1 (
  id NUMBER(10) PRIMARY KEY,
  name VARCHAR2(50)
);

CREATE TABLE B1 (
  id NUMBER(10) PRIMARY KEY,
  a_id NUMBER(10),
  value VARCHAR2(50),
  CONSTRAINT fk_a_id FOREIGN KEY (a_id) REFERENCES A1(id)
);

INSERT INTO A1 (id, name) VALUES (1, 'A1');
INSERT INTO A1 (id, name) VALUES (2, 'A2');
INSERT INTO B1 (id, a_id, value) VALUES (1, 1, 'B1');
INSERT INTO B1 (id, a_id, value) VALUES (2, 1, 'B2');
INSERT INTO B1 (id, a_id, value) VALUES (3, 2, 'B3');

CREATE OR REPLACE VIEW V1 AS
SELECT A1.id, A1.name, B1.value
FROM A1 INNER JOIN B1 ON A1.id = B1.a_id;

SELECT * FROM V1;

CREATE MATERIALIZED VIEW MV_OPA
REFRESH FORCE ON DEMAND
START WITH SYSDATE NEXT SYSDATE + 2/1440
AS
SELECT A1.id, A1.name, B1.value
FROM A1 INNER JOIN B1 ON A1.id = B1.a_id;

EXEC DBMS_MVIEW.REFRESH('MV_OPA');

SELECT * FROM MV_OPA;

